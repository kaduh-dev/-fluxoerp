‚úÖ Atualizar AuthContext com refresh de sess√£o e prote√ß√£o por tenant
Arquivo: src/contexts/AuthContext.tsx

tsx
Copiar
Editar
import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useNavigate } from 'react-router-dom';

interface AuthContextProps {
  user: any;
  role: string | null;
  tenantId: string | null;
  loading: boolean;
  logout: () => Promise<void>;
  checkPermission: (permission: string) => Promise<boolean>;
}

const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<any>(null);
  const [role, setRole] = useState<string | null>(null);
  const [tenantId, setTenantId] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  const loadUser = async () => {
    setLoading(true);
    const {
      data: { session },
      error,
    } = await supabase.auth.getSession();

    if (error || !session) {
      setUser(null);
      setRole(null);
      setTenantId(null);
      setLoading(false);
      return;
    }

    setUser(session.user);

    const { data: profile } = await supabase
      .from('profiles')
      .select('role, tenant_id')
      .eq('id', session.user.id)
      .single();

    if (profile) {
      setRole(profile.role);
      setTenantId(profile.tenant_id);
    }

    setLoading(false);
  };

  const refreshSession = async () => {
    const { error } = await supabase.auth.refreshSession();
    if (error) console.error('Erro ao renovar sess√£o:', error.message);
  };

  const logout = async () => {
    await supabase.auth.signOut();
    setUser(null);
    setRole(null);
    setTenantId(null);
    navigate('/login');
  };

  const checkPermission = async (permission: string): Promise<boolean> => {
    const { data, error } = await supabase
      .from('permissions')
      .select('*')
      .eq('user_id', user.id)
      .eq('permission', permission)
      .single();

    return !!data && !error;
  };

  useEffect(() => {
    loadUser();
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(() => loadUser());

    return () => subscription.unsubscribe();
  }, []);

  return (
    <AuthContext.Provider value={{ user, role, tenantId, loading, logout, checkPermission }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error('useAuth must be used within an AuthProvider');
  return context;
};
üß© Criar Hook de Interceptor Global
Arquivo: src/hooks/use-auth-interceptor.ts

ts
Copiar
Editar
import { useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';

export const useAuthInterceptor = () => {
  const { logout } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    const listener = (event: any) => {
      if (event.detail?.code === '401') {
        logout();
        navigate('/login');
      }
    };

    window.addEventListener('auth-error', listener);
    return () => window.removeEventListener('auth-error', listener);
  }, [logout]);
};
üóÇÔ∏è Migration: Tabela de Permiss√µes
Arquivo: supabase/migrations/02_create_permissions.sql

sql
Copiar
Editar
CREATE TABLE public.permissions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  permission text NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc', now())
);

ALTER TABLE public.permissions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can read their own permissions"
  ON public.permissions
  FOR SELECT
  USING (user_id = auth.uid());
üß™ Uso em App.tsx
Arquivo: src/App.tsx

tsx
Copiar
Editar
import { useAuthInterceptor } from '@/hooks/use-auth-interceptor';

function App() {
  useAuthInterceptor();
  return (
    // ...
  );
}
‚úÖ Uso de Permiss√µes no C√≥digo
tsx
Copiar
Editar
const { checkPermission } = useAuth();

useEffect(() => {
  const verify = async () => {
    const allowed = await checkPermission('can_view_finance');
    if (!allowed) {
      toast.error('Voc√™ n√£o tem permiss√£o');
    }
  };
  verify();
}, []);
