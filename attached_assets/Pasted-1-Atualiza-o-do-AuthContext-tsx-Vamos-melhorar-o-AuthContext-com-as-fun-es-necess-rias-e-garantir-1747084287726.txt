1. Atualização do AuthContext.tsx
Vamos melhorar o AuthContext com as funções necessárias e garantir que a autenticação e controle de acesso funcionem corretamente, incluindo o sistema de permissões e validação de sessão.

Funções do AuthContext
Função hasRole: Verifica se o usuário tem a role necessária.

Função checkPermission: Define permissões mais granulares para diferentes áreas do sistema (ex: admin, user, etc.).

Função updateRole: Permitirá que administradores alterem as roles dos usuários.

Função deleteProfile: Para excluir perfis de usuários (somente admins).

Exemplo de AuthContext.tsx:
tsx
Copiar
Editar
import { createContext, useContext, useState, useEffect } from 'react';
import { supabase } from '../integrations/supabase/client';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';

interface AuthContextProps {
  user: any;
  login: (email: string, password: string) => void;
  logout: () => void;
  register: (email: string, password: string, fullName: string) => void;
  resetPassword: (email: string) => void;
  updateProfile: (profileData: { fullName: string }) => void;
  hasRole: (role: string) => boolean;
  checkPermission: (permission: string) => boolean;
}

const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const AuthProvider: React.FC = ({ children }) => {
  const [user, setUser] = useState<any>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const session = supabase.auth.session();
    setUser(session?.user);
  }, []);

  const login = async (email: string, password: string) => {
    const { error, user } = await supabase.auth.signIn({ email, password });
    if (error) {
      toast.error('Erro ao realizar login!');
    } else {
      setUser(user);
      navigate('/dashboard'); // ou outra rota
    }
  };

  const logout = async () => {
    await supabase.auth.signOut();
    setUser(null);
    navigate('/login');
  };

  const register = async (email: string, password: string, fullName: string) => {
    const { error, user } = await supabase.auth.signUp({ email, password });
    if (error) {
      toast.error('Erro ao registrar usuário!');
    } else {
      // Criar o perfil
      await createProfile(user?.id, fullName);
      navigate('/dashboard');
    }
  };

  const resetPassword = async (email: string) => {
    const { error } = await supabase.auth.api.resetPasswordForEmail(email);
    if (error) {
      toast.error('Erro ao enviar link de recuperação!');
    } else {
      toast.success('Link de recuperação enviado!');
    }
  };

  const updateProfile = async (profileData: { fullName: string }) => {
    const { error } = await supabase.from('profiles').upsert({
      id: user?.id,
      full_name: profileData.fullName
    });
    if (error) {
      toast.error('Erro ao atualizar perfil!');
    } else {
      toast.success('Perfil atualizado!');
    }
  };

  const hasRole = (role: string) => {
    return user?.role === role;
  };

  const checkPermission = (permission: string) => {
    // Implementar lógica para permissões mais granular
    return true; // Exemplo
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        login,
        logout,
        register,
        resetPassword,
        updateProfile,
        hasRole,
        checkPermission
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
2. Implementação da função deleteProfile
Esta função será usada para excluir perfis de usuários (somente para admins). Pode ser chamada pela interface administrativa.

tsx
Copiar
Editar
const deleteProfile = async (userId: string) => {
  if (!hasRole('admin')) {
    toast.error('Acesso negado');
    return;
  }

  const { error } = await supabase.from('profiles').delete().eq('id', userId);
  if (error) {
    toast.error('Erro ao excluir perfil!');
  } else {
    toast.success('Perfil excluído!');
  }
};
3. Funções de Sessão
A função refreshSession vai renovar automaticamente a sessão do usuário.

tsx
Copiar
Editar
const refreshSession = async () => {
  const { data, error } = await supabase.auth.refreshSession();
  if (error) {
    toast.error('Erro ao renovar sessão');
  } else {
    setUser(data?.user);
  }
};
4. Controle de Acesso com PrivateRoute
Agora, podemos utilizar o PrivateRoute para proteger rotas, baseadas em roles e permissões. Exemplo de uso:

tsx
Copiar
Editar
import { Route, Redirect } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const PrivateRoute = ({ component: Component, allowedRoles, ...rest }) => {
  const { user, hasRole } = useAuth();

  if (!user) {
    return <Redirect to="/login" />;
  }

  if (!allowedRoles.some(role => hasRole(role))) {
    return <Redirect to="/unauthorized" />;
  }

  return <Route {...rest} component={Component} />;
};
5. Permissões Granulares
Para implementar permissões mais específicas, você pode criar uma tabela de permissões ou um sistema de controle no checkPermission.

Próximos Passos
Implementar validação de formulários com mensagens de erro amigáveis.

Adicionar testes unitários para validar todas as funções de autenticação e controle de acesso.

Melhorar o checkPermission para casos específicos.

Implementar a exclusão de perfis de forma administrativa.

