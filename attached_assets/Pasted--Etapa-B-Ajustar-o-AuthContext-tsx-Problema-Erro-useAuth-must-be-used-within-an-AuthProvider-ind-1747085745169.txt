 Etapa B: Ajustar o AuthContext.tsx
Problema:
Erro "useAuth must be used within an AuthProvider" indica que AuthProvider n√£o est√° corretamente aplicado.

Solu√ß√£o:
No main.tsx (ou App.tsx), envolva sua aplica√ß√£o corretamente:

tsx
Copiar
Editar
import { AuthProvider } from "@/contexts/AuthContext";

<React.StrictMode>
  <AuthProvider>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </AuthProvider>
</React.StrictMode>
Al√©m disso, valide que o estado do AuthContext possui carregamento (loading) antes de renderizar as rotas:

tsx
Copiar
Editar
if (loading) return <LoadingScreen />; // spinner ou skeleton
‚úÖ Etapa C: Melhorar Verifica√ß√£o no Dashboard
Arquivo: src/pages/dashboard/Dashboard.tsx
Adicione prote√ß√£o com base em autentica√ß√£o e carregamento:

tsx
Copiar
Editar
import { useAuth } from "@/contexts/AuthContext";

export default function Dashboard() {
  const { user, loading, profile } = useAuth();

  if (loading) return <LoadingScreen />;

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  return (
    <div>
      <h1>Bem-vindo, {profile?.full_name ?? "Usu√°rio"}</h1>
    </div>
  );
}
üß† Melhorias Recomendadas (prioridade por impacto)
üõ†Ô∏è Infraestrutura e Seguran√ßa
 Interceptar requisi√ß√µes Supabase: centralize chamadas com wrapper para logging e tratamento.

 Refresh token autom√°tico: Supabase j√° faz isso, mas monitore com onAuthStateChange + fallback.

 Valida√ß√£o de tenant: em todas as from('...'), use eq('tenant_id', currentTenantId).

üß© Experi√™ncia do Usu√°rio
 Loading states globais: use context ou React Query isLoading.

 Feedback visual (toast, skeletons): com sonner, shadcn-ui, ou react-hot-toast.

 Timeout de requisi√ß√£o: n√£o nativo no Supabase, mas pode usar AbortController com fetch.

üß™ Qualidade e Monitoramento
 Tratamento global de erros: HOC de erro ou ErrorBoundary.

 Logs detalhados (debug): console + envio para servi√ßo (Ex: Logtail, Sentry).

 Fallbacks de dados: mostre estado intermedi√°rio (ex: "Sem perfil cadastrado").

‚öôÔ∏è Performance
 React Query + cache: ideal para dados como perfil, permiss√µes e listagens.

 Lazy loading de componentes: com React.lazy e Suspense.

 Evitar chamadas duplicadas: armazene estado de sess√£o/contexto em local central.

