import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { supabase } from '@/lib/supabase';

interface Tenant {
  id: string;
  name: string;
}

interface TenantContextType {
  currentTenant: Tenant | null;
  isLoading: boolean;
}

export const TenantContext = createContext<TenantContextType>({
  currentTenant: null,
  isLoading: true,
});

export const TenantProvider = ({ children }: { children: ReactNode }) => {
  const [currentTenant, setCurrentTenant] = useState<Tenant | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    async function initializeTenant() {
      try {
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        if (userError) throw userError;
        if (!user?.id) throw new Error('Usuário não autenticado.');

        const tenantId = user.user_metadata?.tenant_id;
        if (!tenantId) throw new Error('tenant_id não encontrado em user_metadata.');

        // Verifica se é um UUID válido
        if (!/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.test(tenantId)) {
          throw new Error('tenant_id com formato inválido.');
        }

        // Seta o tenant_id no contexto da sessão do Supabase
        const { error: rpcError } = await supabase.rpc('set_tenant_id', { id: tenantId });
        if (rpcError) throw rpcError;

        // Busca dados do tenant
        const { data: tenantData, error: tenantError } = await supabase
          .from('tenants')
          .select('*')
          .eq('id', tenantId)
          .single();

        if (tenantError || !tenantData) throw tenantError || new Error('Tenant não encontrado.');

        setCurrentTenant(tenantData as Tenant);
      } catch (error) {
        console.error('Erro ao inicializar tenant:', error);
      } finally {
        setIsLoading(false);
      }
    }

    initializeTenant();
  }, []);

  return (
    <TenantContext.Provider value={{ currentTenant, isLoading }}>
      {children}
    </TenantContext.Provider>
  );
};

export const useTenant = () => useContext(TenantContext);
